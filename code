// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MediLedger {
    
    // Structure for storing medical record details
    struct MedicalRecord {
        string recordType;
        string dataHash; // Hash of the medical data (off-chain)
        uint256 timestamp;
    }

    // Structure for consent (granting access to healthcare providers)
    struct Consent {
        address providerAddress;
        string accessLevel; // Read, Write, Full
        uint256 expiryDate;
    }

    // Mapping patient to their medical records
    mapping(address => MedicalRecord[]) public medicalRecords;

    // Mapping patient to their consent for providers
    mapping(address => Consent[]) public consents;

    // Event for creating a medical record
    event MedicalRecordCreated(address indexed patient, string recordType, string dataHash, uint256 timestamp);

    // Event for granting consent
    event ConsentGranted(address indexed patient, address provider, string accessLevel, uint256 expiryDate);

    // Function to create a medical record (only patient)
    function createMedicalRecord(string memory _recordType, string memory _dataHash) public {
        MedicalRecord memory newRecord = MedicalRecord({
            recordType: _recordType,
            dataHash: _dataHash,
            timestamp: block.timestamp
        });
        medicalRecords[msg.sender].push(newRecord);
        emit MedicalRecordCreated(msg.sender, _recordType, _dataHash, block.timestamp);
    }

    // Function to grant consent to a healthcare provider
    function grantConsent(address _providerAddress, string memory _accessLevel, uint256 _expiryDate) public {
        Consent memory newConsent = Consent({
            providerAddress: _providerAddress,
            accessLevel: _accessLevel,
            expiryDate: _expiryDate
        });
        consents[msg.sender].push(newConsent);
        emit ConsentGranted(msg.sender, _providerAddress, _accessLevel, _expiryDate);
    }

    // Function to view a patient's medical records (only provider with consent)
    function viewMedicalRecords(address _patient) public view returns (MedicalRecord[] memory) {
        require(hasConsent(_patient, msg.sender), "You do not have access to these records");
        return medicalRecords[_patient];
    }

    // Internal function to check if provider has consent
    function hasConsent(address _patient, address _provider) internal view returns (bool) {
        for (uint256 i = 0; i < consents[_patient].length; i++) {
            if (consents[_patient][i].providerAddress == _provider && consents[_patient][i].expiryDate > block.timestamp) {
                return true;
            }
        }
        return false;
    }
}
